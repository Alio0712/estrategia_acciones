#==============================================================================
#           Código compartido entre Juan Pablo Pisano @JohnGalt_is_www
#                           y Camilo Cisera
#==============================================================================

import pandas as pd
import datetime as dt
import yfinance as yf
import matplotlib.pyplot as plt
plt.style.use('seaborn-white')
plt.rcParams['figure.figsize'] = [12,6]
plt.rcParams["font.weight"] = "bold"
plt.rcParams["axes.labelweight"] = "bold"
plt.rcParams["font.size"] = 15

'''
Compara el yield buy & hold de cartera vs rotar 5 mejores o 5 peores de semana anterior
'''

años = 11
start = dt.date.today()-dt.timedelta(365*años)
end = dt.date.today()

tickers = ["GGAL", "BMA", "YPF", "TGS", "CRESY", "IRS", "TEO", "MELI", "EDN", "BBAR", "TX"]

data =  yf.download(tickers, start=start, end=end, interval="1wk")['Adj Close']
yields = data.pct_change()

yieldsPast = yields.shift()

best, worst = pd.DataFrame(), pd.DataFrame()
for idx, row in yieldsPast.iterrows():
    ordenadas = row.sort_values()
    best5_tickers = list(ordenadas.index[-5:])
    worst5_tickers = list(ordenadas.index[:5])
    week = yields.loc[yields.index==idx]
    weekBest = week.transpose().loc[best5_tickers]
    weekWorst = week.transpose().loc[worst5_tickers]
    worst = pd.concat([worst, weekWorst],axis=1)
    best = pd.concat([best, weekBest],axis=1)

best = best.transpose()
worst = worst.transpose()
best['yield']=best.mean(axis=1)
worst['yield']=worst.mean(axis=1)
yields['yield']=yields.mean(axis=1)

results = pd.DataFrame()
results.loc['Buy & Hold','CAGR'] = (yields['yield']+1).prod()**(1/años)-1
results.loc['Best 5 Portfolio','CAGR'] = (best['yield']+1).prod()**(1/años)-1
results.loc['Worst 5 Portfolio','CAGR'] = (worst['yield']+1).prod()**(1/años)-1

best['yieldAcum'] = (best['yield']+1).cumprod()-1
worst['yieldAcum'] = (worst['yield']+1).cumprod()-1
yields['yieldAcum'] = (yields['yield']+1).cumprod()-1

#Grafico1 = Total 2009-actualidad
fig, ax = plt.subplots(figsize=(14,7))
ax.plot(yields.yieldAcum,  lw=1, c='tab:blue', label='Comprar y mantener')
ax.plot(best.yieldAcum, lw=1, c='tab:green', label='Comprar los mejores 5 de la semana previa')
ax.plot(worst.yieldAcum,  lw=1, c='tab:red', label='Comprar los peores 5 de la semana previa')
plt.title("Estrategias de rebalanceo semanal", fontsize=16, fontweight="bold")
plt.legend(fontsize=14)


#Preparo grafico 2 = crisis 2011-2012
base1 = pd.DataFrame()
base1["B&H"] = yields.yieldAcum / yields.yieldAcum.loc["2011-01-17"]
base1["Best"] = best.yieldAcum / best.yieldAcum.loc["2011-01-17"]
base1["Worst"] = worst.yieldAcum / worst.yieldAcum.loc["2011-01-17"]
#Grafico2
fig, ax = plt.subplots(figsize=(14,7))
ax.plot(base1["B&H"].loc["2011-01-17":"2012-11-16"],  lw=1.2, c='tab:blue', label='Comprar y mantener')
ax.plot(base1["Best"].loc["2011-01-17":"2012-11-16"], lw=1.2, c='tab:green', label='Comprar los mejores 5 de la semana previa')
ax.plot(base1["Worst"].loc["2011-01-17":"2012-11-16"],  lw=1.2, c='tab:red', label='Comprar los peores 5 de la semana previa')
plt.title("Estrategias de rebalanceo semanal (Crisis 2011/2012)",
          fontsize=16, fontweight="bold")
plt.legend(fontsize=14)

#Preparo grafico 3 = Recuperación 2012-2018
base1b = pd.DataFrame()
base1b["B&H"] = yields.yieldAcum / yields.yieldAcum.loc["2012-11-12"]
base1b["Best"] = best.yieldAcum / best.yieldAcum.loc["2012-11-12"]
base1b["Worst"] = worst.yieldAcum / worst.yieldAcum.loc["2012-11-12"]
#Grafico3
fig, ax = plt.subplots(figsize=(14,7))
ax.plot(base1b["B&H"].loc["2012-11-12":"2018-01-31"],  lw=1, c='tab:blue', label='Comprar y mantener')
ax.plot(base1b["Best"].loc["2012-11-12":"2018-01-31"], lw=1, c='tab:green', label='Comprar los mejores 5 de la semana previa')
ax.plot(base1b["Worst"].loc["2012-11-12":"2018-01-31"],  lw=1, c='tab:red', label='Comprar los peores 5 de la semana previa')
plt.title("Estrategias de rebalanceo semanal (Recuperación 2012-2018)",
          fontsize=16, fontweight="bold")
plt.legend(fontsize=14)

#Preparo grafico 4 = Crisis 2018-¿2020?
base1c = pd.DataFrame()
base1c["B&H"] = yields.yieldAcum / yields.yieldAcum.loc["2018-01-29"]
base1c["Best"] = best.yieldAcum / best.yieldAcum.loc["2018-01-29"]
base1c["Worst"] = worst.yieldAcum / worst.yieldAcum.loc["2018-01-29"]
#Grafico4
fig, ax = plt.subplots(figsize=(14,7))
ax.plot(base1c["B&H"].loc["2018-01-29":],  lw=1, c='tab:blue', label='Comprar y mantener')
ax.plot(base1c["Best"].loc["2018-01-29":], lw=1, c='tab:green', label='Comprar los mejores 5 de la semana previa')
ax.plot(base1c["Worst"].loc["2018-01-29":],  lw=1, c='tab:red', label='Comprar los peores 5 de la semana previa')
plt.title("Estrategias de rebalanceo semanal (Crisis 2018-2020)",
          fontsize=16, fontweight="bold")
plt.legend(fontsize=14)



#Grafico por años
columns = 3
rows = años//columns+1
fig2, ax2 = plt.subplots(figsize=(14,4*rows),nrows=rows, ncols=columns)
for i in range(años+1):
    dtFrom = dt.datetime(end.year-años +i , 1 , 1)
    dtTo = dt.datetime(end.year-años +i +1 , 1 , 1)
    yieldsYr = (yields.loc[(yields.index > dtFrom)&(yields.index < dtTo)]).copy()
    bestYr = (best.loc[(best.index > dtFrom)&(best.index < dtTo)]).copy()
    worstYr = (worst.loc[(worst.index > dtFrom)&(worst.index < dtTo)]).copy()
    bestYr['yieldAcum'] = (bestYr['yield']+1).cumprod()-1
    worstYr['yieldAcum'] = (worstYr['yield']+1).cumprod()-1
    yieldsYr['yieldAcum'] = (yieldsYr['yield']+1).cumprod()-1    
    row = i//columns
    col = i%columns
    ax2[row][col].plot(yieldsYr.yieldAcum,  lw=1, c='tab:blue')
    ax2[row][col].plot(bestYr.yieldAcum,  lw=1, c='tab:green')
    ax2[row][col].plot(worstYr.yieldAcum,  lw=1, c='tab:red')
    ax2[row][col].set_title(str(end.year-años +i), y=0.83, fontsize=20, alpha=1, c="k")
    plt.setp(ax2[row][col].get_xticklabels(), visible=False)    
print(results)

#====================================================================
#           Intento de ver correlaciones y covarianzas
#====================================================================

tickers = ["GGAL", "BMA", "YPF", "TGS", "CRESY", "IRS", "TEO", "MELI", "EDN", "BBAR", "TX"]
data =  yf.download(tickers, period="max")['Adj Close']
data.dropna(inplace=True)
yields = data.pct_change()
GGAL = yields["GGAL"]
BBAR = yields["BBAR"]
TGS = yields["TGS"]
TEO = yields["TEO"]
MELI = yields["MELI"]
EDN = yields["EDN"]
TX = yields["TX"]
CRESY = yields["CRESY"]

GGAL.rolling(window=250).corr(other=BBAR).plot()
GGAL.rolling(window=250).corr(other=TGS).plot()
BBAR.rolling(window=250).corr(other=TEO).plot()
EDN.rolling(window=250).corr(other=MELI).plot()
TX.rolling(window=250).corr(other=TGS).plot()
CRESY.rolling(window=250).corr(other=TEO).plot()

GGAL.rolling(window=250).cov(other=BBAR).plot()
GGAL.rolling(window=250).cov(other=TGS).plot()
BBAR.rolling(window=250).cov(other=TEO).plot()
EDN.rolling(window=250).cov(other=MELI).plot()
TX.rolling(window=250).cov(other=TGS).plot()
CRESY.rolling(window=250).cov(other=TEO).plot()
